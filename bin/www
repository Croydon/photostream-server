#!/usr/bin/env node

/**
 * Module dependencies.
 */

var appBuilder = require('../app');
var debug = require('debug')('PhotoStreamServer:server');
var http = require('http');
var io = require('socket.io');
var events = require('../events');
var routes = require('../routes/index');

var app = appBuilder(routes, io);

var port = normalizePort(process.env.PORT || '8081');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

io.webSocket = io.listen(server, {});
var webSocket = io.webSocket;
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

webSocket.connectedSockets = [];

webSocket.on(events.ON_CONNECTION, function (socket) {

  var token = socket.handshake.query.token;
  socket.uuid = token;

  webSocket.connectedSockets.push(socket);

  socket.on(events.ON_DISCONNECT, function () {
    var index = webSocket.connectedSockets.indexOf(socket);
    if (index > -1) {
      webSocket.connectedSockets.splice(index, 1);
    }
  });

});

webSocket.emit = function(token,instruction,data){
  for (var p = 0; p < webSocket.connectedSockets.length; p++){
    var currentSocket = webSocket.connectedSockets[p];
    if (currentSocket.uuid != token){
      currentSocket.emit(instruction,data);
    }
  }
};