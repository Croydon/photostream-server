#!/usr/bin/env node

/*
 * The MIT License
 *
 * Copyright (c) 2016 Andreas Schattney
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

const DEBUG = false;

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Module dependencies.
 */

var appBuilder = require('../app');
var debug = require('debug')('PhotoStreamServer:server');
var http = require('http');
var io = require('socket.io');
var events = require('../events');
var routes = require('../routes/index');
var net = require('net');
var cluster = require('cluster');
var io_redis = require('socket.io-redis');
var sticky = require('sticky-session');
var port = normalizePort(process.env.PORT || require('../config').port);

var app = appBuilder(routes, io);

//app.set('port', port);

/**
 * Create HTTP server.
 */
http.globalAgent.maxSockets = Infinity;

var server = http.createServer(app);

if (sticky.listen(server, port)) {
    io.webSocket = io.listen(server, {pingInterval: 45000, pingTimeout: 120000});

    var webSocket = io.webSocket;


// Tell Socket.IO to use the redis adapter. By default, the redis
// server is assumed to be on localhost:6379. You don't have to
// specify them explicitly unless you want to change them.
    webSocket.adapter(io_redis({host: 'localhost', port: 6379}));

    server.on('error', onError);
    server.on('listening', onListening);

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
        if (error.syscall !== 'listen') {
            throw error;
        }

        var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;

        // handle specific listen errors with friendly messages
        switch (error.code) {
            case 'EACCES':
                console.error(bind + ' requires elevated privileges');
                process.exit(1);
                break;
            case 'EADDRINUSE':
                console.error(bind + ' is already in use');
                process.exit(1);
                break;
            default:
                throw error;
        }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
        var addr = server.address();
        var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
        debug('Listening on ' + bind);
    }

    webSocket.connectedSockets = {};

    function remove(socket, disconnect, callback) {
        if (socket.uuid in webSocket.connectedSockets) {
            if (DEBUG) console.log("removing socket");
            var s = webSocket.connectedSockets[socket.uuid];
            //console.log("with uuid: " + s.uuid);
            if (disconnect)
                s.disconnect(true);
            delete webSocket.connectedSockets[socket.uuid];
        }
        if (callback !== undefined)
            callback();
    }

    webSocket.on(events.ON_CONNECTION, function (socket) {

        if (DEBUG) console.log("connected socket reached worker " + cluster.worker.id);

        var token = socket.handshake.query.token;
        socket.uuid = token;

        remove(socket, true, function () {
            if (DEBUG) console.log("adding socket with uuid: " + socket.uuid);
            webSocket.connectedSockets[socket.uuid] = socket;
        });

        socket.on(events.ON_DISCONNECT, function () {
            remove(socket, false);
        });

    });

    webSocket.emit = function (token, instruction, data) {
        if (DEBUG) console.log(instruction);
        if (DEBUG) console.log("try emitting from worker " + cluster.worker.id);
        if (token in webSocket.connectedSockets) {
            var socket = webSocket.connectedSockets[token];
            if ('uuid' in socket) {
                if (DEBUG) console.log("current: " + socket.uuid);
                socket.broadcast.emit(instruction, data);
            } else {
                if (DEBUG) console.log("could not broadcast from worker " + cluster.worker.id + "!!");
            }
        } else {
            if (DEBUG) console.log("token not defined in worker " + cluster.worker.id + "! Sending broadcast to other workers");
        }
    };

}